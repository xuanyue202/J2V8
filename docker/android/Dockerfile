# sys_image can be overridden from the CLI
ARG sys_image=debian:jessie

FROM $sys_image

RUN echo Using base-image: $sys_image

RUN mkdir -p /temp/docker/shared/
# WORKDIR /temp/docker/shared/

# NOTE: copy shared scripts and run them separately
# this helps when changing commands only in a single script,
# since it will not requrie rebuilding all docker image layers
# but just the ones that were affected

COPY ./shared/install.debian.packages.sh /temp/docker/shared
WORKDIR /temp/docker/shared/
RUN ./install.debian.packages.sh

# RUN apt-get -qq install -y bzip2

# WORKDIR /temp/docker/android/
# ADD ./android/android-ndk-4280707-linux-x86_64.tar /temp/docker/android/

WORKDIR /temp/docker/android/
RUN curl -O http://www.xsite.io/downloads/android-ndk-4280707-linux-x86_64.tar && \
    tar -xvf android-ndk-4280707-linux-x86_64.tar && \
    rm -rf android-ndk-4280707-linux-x86_64.tar
# COPY ./android/android-ndk-4280707-linux-x86_64.tar /temp/docker/android/

ENV NDK /temp/docker/android/android-ndk-r16-beta1-canary
RUN $NDK/build/tools/make_standalone_toolchain.py \
    --arch x86 --api 17 --stl=libc++ --install-dir /tmp/android-toolchain

ENV NDK "/tmp/android-toolchain"
# ENV PATH "$PATH:/tmp/android-toolchain/bin:$NDK"

# RUN ls /tmp/android-toolchain/bin

# install the heaviest dependencies first
# (this keeps the big things cached in docker, even if we need to modify one of the shell scripts
# of one of the lighter dependencies below)

# ENV NDK "/build/android-ndk-$NDK_VERSION"
# ENV PATH "$PATH:/build/android-gcc-toolchain:$NDK"

WORKDIR /temp/docker/shared/

# RUN apt-get -qq install -y python-openssl

RUN echo "Preparing Android SDK..." && \
    wget -qO- http://dl.google.com/android/android-sdk_r23-linux.tgz | \
    tar xvz -C /usr/local/ && \
    mv /usr/local/android-sdk-linux /usr/local/android-sdk && \
    chown -R root:root /usr/local/android-sdk/

# Add android tools and platform tools to PATH
ENV ANDROID_HOME "/usr/local/android-sdk"
ENV PATH "$PATH:$ANDROID_HOME/tools"
ENV PATH "$PATH:$ANDROID_HOME/platform-tools"

# Create fake keymap file
RUN mkdir /usr/local/android-sdk/tools/keymaps && \
    touch /usr/local/android-sdk/tools/keymaps/en-us

# install the required license for sdk-build-tools
RUN mkdir -p $ANDROID_HOME/licenses && echo -e "\n8933bad161af4178b1185d1a37fbf41ea5269c55\n" > $ANDROID_HOME/licenses/android-sdk-license

# java must be installed at this point, because the following android CLI commands depend on it
COPY ./shared/install.jdk.sh /temp/docker/shared
RUN ./install.jdk.sh
ENV JAVA_HOME "/opt/jdk/jdk1.8.0_131"

# set up the android emulator & android images for running the unit tests
# see: https://github.com/tracer0tong/android-emulator
RUN ( sleep 4 && while [ 1 ]; do sleep 1; echo y; done ) | android update sdk --no-ui --force -a --filter \
    build-tools-24.0.3,tools,platform-tools,android-19,extra-android-m2repository,sys-img-x86-android-19,sys-img-armeabi-v7a-android-19 && \
    echo "y" | android update adb

# now install the rest of the tools that are more lightweight
COPY ./shared/install.cmake.sh /temp/docker/shared
RUN ./install.cmake.sh
ENV PATH "$PATH:/opt/cmake/bin"

COPY ./shared/install.gradle.sh /temp/docker/shared
RUN ./install.gradle.sh
ENV GRADLE_HOME "/opt/gradle-3.5"
ENV PATH "$PATH:$GRADLE_HOME/bin"

# download the most critical gradle dependencies for the build beforehand
RUN mkdir -p /temp
COPY ./shared/build.gradle /temp
COPY ./android/AndroidManifest.xml /temp/src/main/AndroidManifest.xml
WORKDIR /temp
RUN cd /temp && gradle --dry-run

EXPOSE 22
EXPOSE 5037
EXPOSE 5554
EXPOSE 5555
EXPOSE 5900
